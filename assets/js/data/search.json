[ { "title": "How to setup self-hosted openvpn server", "url": "/posts/how-to-setup-self-hosted-openvpn-server/", "categories": "Cloud/DevOps, OpenVPN", "tags": "devops, openvpn", "date": "2022-06-13 09:06:00 +0000", "snippet": "PrerequisiteA VM (ubuntu 20.04) should be available for the following steps.Step 1 - Installing OpenVPN and Easy-RSAsudo apt updatesudo apt install openvpn easy-rsamkdir ~/easy-rsa # create a new directory on the OpenVPN Server as your non-root userln -s /usr/share/easy-rsa/* ~/easy-rsa/ # create a symlink from the easyrsa script that the package installed into the ~/easy-rsa directorysudo chown azureuser ~/easy-rsa # ensure the directory’s owner is your non-root sudo userchmod 700 ~/easy-rsa # restrict access to that userStep 2 - Creating a PKI for OpenVPNcd ~/easy-rsavi vars # create vars filepaste the following 2 lines into vars fileset_var EASYRSA_ALGO \"ec\"set_var EASYRSA_DIGEST \"sha512\"Once you have populated the vars file you can proceed with creating the PKI directory./easyrsa init-pkiStep 3 — Creating an OpenVPN Server Certificate Request and Private Keycd ~/easy-rsa./easyrsa gen-req server nopass # call the easyrsa with the gen-req option followed by a Common Name (server in this case) for the machineThis will create a private key for the server and a certificate request file called server.req. Copy the server key to the /etc/openvpn/server directory:sudo cp /home/azureuser/easy-rsa/pki/private/server.key /etc/openvpn/server/Step 4 — Creating the rootCA and signing the OpenVPN Server’s Certificate Requestmkdir ~/CA # create folder to store rootCA key and rootCA certcd ~/CA openssl genrsa -des3 -out ca.key 4096 # create root keyopenssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out ca.crt # Create and self sign the Root Certificatecp ~/easy-rsa/pki/reqs/server.req ~/CA # copy server.req to CA directoryopenssl x509 -req -in server.req -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -sha512 # generate server certificatesudo cp ~/CA/{server.crt,ca.crt} /etc/openvpn/server # copy server.crt and ca.crt to /etc/openvpn/serverStep 5 — Configuring OpenVPN Cryptographic Materialcd ~/easy-rsaopenvpn --genkey --secret ta.keysudo cp ta.key /etc/openvpn/serverStep 6 — Generating a Client Certificate and Key Pairmkdir -p ~/client-configs/keyschmod -R 700 ~/client-configscd ~/easy-rsa./easyrsa gen-req client1 nopass # generate client1 key and signing certification requestcp pki/private/client1.key ~/client-configs/keys/ # copy client1.key to ~/client-configs/keys/cp pki/reqs/client1.req ~/CA # copy client1.req to ~/CAopenssl x509 -req -in client1.req -CA ca.crt -CAkey ca.key -CAcreateserial -out client1.crt -days 365 -sha512 # generate client1 certificatecp ~/CA/client1.crt ~/client-configs/keys/cp ~/easy-rsa/ta.key ~/client-configs/keys/sudo cp /etc/openvpn/server/ca.crt ~/client-configs/keys/sudo chown azureuser.azureuser ~/client-configs/keys/*Step 7 — Configuring OpenVPNFirstly, copy the sample server.conf file as a starting point for your own configuration file:sudo cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/server/sudo gunzip /etc/openvpn/server/server.conf.gzsudo vi /etc/openvpn/server/server.conf # open server.conf for edittingmake sure the following line are uncommented by removing the “;” or modified (added/removed):tls-crypt ta.key # uncommentcipher AES-256-GCM # uncomment and change value from AES-256-CBC to AES-256-GCMauth SHA256 # add this line right after cipher AES-256-GCM;dh dh2048.pem # comment out this linedh none # add this lineuser nobody # uncomment this linegroup nogroup # uncomment this lineIf you selected a different name during the ./easyrsa gen-req server command earlier, modify the cert and key lines in the server.confcert server.crt # modified if neededkey server.key # modified if neededStep 8 — Adjusting the OpenVPN Server Networking ConfigurationThere are some aspects of the server’s networking configuration that need to be tweaked so that OpenVPN can correctly route traffic through the VPN.sudo vi /etc/sysctl.confThen add the following line at the bottom of the file:net.ipv4.ip_forward = 1save and apply the change with:sudo sysctl -pStep 9 — Firewall Configurationmodify before.rules filesudo vi /etc/ufw/before.rulescopy and paste the following line to /etc/ufw/before.rules# START OPENVPN RULES# NAT table rules*nat:POSTROUTING ACCEPT [0:0]# Allow traffic from OpenVPN client to eth0 (change to the interface you discovered!)-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADECOMMIT# END OPENVPN RULESresult is:## rules.before## Rules that should be run before the ufw command line added rules. Custom# rules should be added to one of these chains:# ufw-before-input# ufw-before-output# ufw-before-forward# # START OPENVPN RULES# NAT table rules*nat:POSTROUTING ACCEPT [0:0]# Allow traffic from OpenVPN client to eth0 (change to the interface you discovered!)-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADECOMMIT# END OPENVPN RULES # Don't delete these required lines, otherwise there will be errors*filter. . .open /etc/default/ufw and change value of DEFAULT_FORWARD_POLICY to ACCEPT:DEFAULT_FORWARD_POLICY=\"ACCEPT\"add udp and ssh port to firewall:sudo ufw allow 1194/udpsudo ufw allow OpenSSHAfter adding those rules, disable and re-enable UFW to restart it and load the changes from all of the files you’ve modified:sudo ufw disablesudo ufw enableStep 10 — Starting OpenVPNrun the following commands to start openvpn server as boot and directly:sudo systemctl -f enable openvpn-server@server.servicesudo systemctl start openvpn-server@server.servicesudo systemctl status openvpn-server@server.service # check status of the serviceStep 11 — Creating the Client Configuration InfrastructureGet started by creating a new directory where you will store client configuration files within the client-configs directory you created earlier:mkdir -p ~/client-configs/filescp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.confopen the file and edit the following linesremote your_server_ip 1194 # replace your_server_ip with your server ip address or domain nameuser nobody # uncomment this linegroup nogroup # uncomment this line;ca ca.crt # comment this line;cert client.crt # comment this line;key client.key # comment this line;tls-auth ta.key 1 # comment this linecipher AES-256-GCM # uncomment this lineauth SHA256 # uncomment this linekey-direction 1 # add this line directly after auth SHA256 linecreate a script that will compile your base configurationvi ~/client-configs/make_config.shInside, add the following content:#!/bin/bash # First argument: Client identifier KEY_DIR=~/client-configs/keysOUTPUT_DIR=~/client-configs/filesBASE_CONFIG=~/client-configs/base.conf cat ${BASE_CONFIG} \\ &lt;(echo -e '&lt;ca&gt;') \\ ${KEY_DIR}/ca.crt \\ &lt;(echo -e '&lt;/ca&gt;\\n&lt;cert&gt;') \\ ${KEY_DIR}/${1}.crt \\ &lt;(echo -e '&lt;/cert&gt;\\n&lt;key&gt;') \\ ${KEY_DIR}/${1}.key \\ &lt;(echo -e '&lt;/key&gt;\\n&lt;tls-crypt&gt;') \\ ${KEY_DIR}/ta.key \\ &lt;(echo -e '&lt;/tls-crypt&gt;') \\ &gt; ${OUTPUT_DIR}/${1}.ovpnmake this file executable:chmod 700 ~/client-configs/make_config.shStep 12 — Generating Client Configurationscd ~/client-configs./make_config.sh client1ls ~/client-configs/filesfrom local or client machine, copy client1.ovpn file to the local machinesftp azureuser@openvpn_server_ip:client-configs/files/client1.ovpn /path_to_save_file/Step 13 — Installing the Client ConfigurationClient Linux machineinstall openvpn software on ubuntusudo apt updatesudo apt install openvpnopen client1.ovpn and comment out line “remote-cert-tls server” with “;”;remote-cert-tls serverConnectingsudo openvpn --config client1.ovpn" }, { "title": "Terraform Cheat Sheet", "url": "/posts/terraform-page/", "categories": "Cloud/DevOps, Terraform", "tags": "devops, terraform", "date": "2022-06-11 18:00:00 +0000", "snippet": "Basic commandsUseful functions" }, { "title": "IT Security Lecture Review", "url": "/posts/it-security-lecture-review/", "categories": "Security", "tags": "security, review", "date": "2020-06-11 22:33:00 +0000", "snippet": "I. Introduction1. Define the term “IT-Security”Protection of information and information systems against unauthorized access and modification and availability of information system services for legitimate users, including measures to thwart, discover or log threats. Protection against unauthorized access must be ensured during storage, processing or in transit.2. What are the aims of “IT-Security”? Describe each aim briefly and present an example. Confidentiality: Protection against unauthorized access Integrity: Protection against unauthorized modification Availability: Resources and Services are available for legitimate users Authenticity and authentication: Unambiguous idenfification of the sender of information or a communication peer Nonrepudiation: Ability to prove that a given message was sent and by whom to a third party not involved in communication Authorization: Accces to resources is limited to certain group of (authenticated) users3. What are passive and active attacks and why is the distinction between them helpful in practice?Passive Attacks Attacker does not actively participate Example: Snooping and wiretapping Difficult to discover Preventive means of protection against active attacksActive attacks Attacker actively manipulates systems or data Manipulation of data or systems Attacker often leaves traces Prevention and Detection possibleII. Cryptographical Principles and MethodsCryptographic model:Classical Encryption Methods: Substitution Transposition Product cipher Applying multiple substitution and/or transposition1. Symmetrical Encryption Schemes2. Public-Key Methods3. Hybrid Methods4. Modes of OperationElectronic Code BookCipher Block ChainingCipher Feedback ModeOutput Feedback ModeCounter ModeIII. AuthenticationAuthentication and authenticity: Unambiguous identification of the sender of information or a communication peer1. Factors for Authentication What you know: password What you have: token What you are: biometric2. MethodsSize of Passowrd domain:Authentication by Symmetric KeyAuthentication by Public Key Cryptography3. Digital SignaturesRoot CertificateCertificate for products (servers…)Certificate Request (come along with csr file)Public-private key pairThe CA have its own signed certificate, and private key.An organization create public-private key pair, and certificate signed request.The CA must sign the CSR with its private key and send back to organization.From the internet:You usually start by generating a private key / public key pair, followed by a CSR (Certificate Signing Request). The CSR would contain a copy of the public key and some basic information about the subject. Once you’ve generated a CSR, you would then submit that CSR to a CA. Once the CA is done signing the cert, the CA would then return the cert to you and you would then import that signed certificate to your server. If we recall our discussion on digital certificates, the signed cert would contain some basic information regarding the subject (your site), the issuer, the validity period, the public key (of your site), and a digital signature of the cert signed using the CA’s private key.In summary, You generate a private key / public key pair and submit a CSR to a Certificate Authority. The contents of the CSR will form part of the final server certificate. The CA verifies whether the information on the certificate is correct and then signs it using its (the CA’s) private key. It then returns the signed server certificate to you. You import the signed server certificate unto your server.IV. Operating System SecurityVulnerabilities in ServicesV. Introduction to Network SecurityThreats Sniffing Manipulation of a message ARP-Spoofing: IP-Spoofing: TCP sequence attack: DNS-Spoofing:Security: Application Layer Security Security on Transport Layer Network Layer Security Data Link Layer SecurityVI. FirewallProblems and Limits of Packet filter: No user or application-specific filtering possible Use of Transport-layer information to identify application protocols Application with varying port number Tunneling and encryption" }, { "title": "Network Security Exercises", "url": "/posts/network-security-exercises/", "categories": "Projects, Hobby", "tags": "project, hobby, docker, lab network", "date": "2020-06-11 22:15:00 +0000", "snippet": "How to Create a LAB VNET with DockerThe system will look like the following diagram: Note: the ip addresses of the VMs are different from the above diagram (also even if you don’t use docker but normal VMs tool like VirtualBox…), but the method stays the same. $ docker network create --driver=bridge --subnet=172.16.2.0/24 --ip-range=172.16.2.0/24 br0 $ docker network create --driver=bridge --subnet=192.168.1.0/24 --ip-range=192.168.1.0/24 br1 $ docker network create --driver=bridge --subnet=10.2.4.0/24 --ip-range=10.2.4.0/24 br1 $ docker run --cap-add=NET_ADMIN -ti --privileged -P --name=router1 --net br0 --ip 172.16.2.4 pthung/itsec-lab /bin/bash $ export PS1=\"router1@172.16.2.4||192.168.1.5: \\w \\$ \" $ docker run --cap-add=NET_ADMIN -ti --privileged -P --name=router2 --net br0 --ip 172.16.2.5 pthung/itsec-lab /bin/bash $ export PS1=\"router2@172.16.2.5||10.2.4.2: \\w \\$ \" Run 2 end machines: $ docker run -ti --cap-add=NET_ADMIN --privileged --name=vm1 --net br1 --ip 192.168.1.100 pthung/itsec-lab /bin/bash $ export PS1=\"machine1@192.168.1.100: \\w \\$ \" $ docker run -ti --cap-add=NET_ADMIN --privileged --name=vm2 --net br2 --ip 10.2.4.37 pthung/itsec-lab /bin/bash $ export PS1=\"machine2@10.2.4.37: \\w \\$ \" Add interfaces to routers:$ docker network connect br1 router1 --ip 192.168.1.5 $ docker network connect br2 router2 --ip 10.2.4.2 Setup iptabble for both routers: $ iptables -t nat -A POSTROUTING --out-interface eth1 -j MASQUERADE $ iptables -A FORWARD --in-interface eth0 -j ACCEPT $ iptables -t nat -A POSTROUTING --out-interface eth0 -j MASQUERADE $ iptables -A FORWARD --in-interface eth1 -j ACCEPT For router1: $ route add -net 10.2.4.0 netmask 255.255.255.0 gateway 172.16.2.5 (ip address of router 2) For router2: route add -net 192.168.1.0 netmask 255.255.255.0 gateway 172.16.2.4 (ip address of router 1) For vm1: $ route add default gateway 192.168.1.5 For vm2: $ route add default gateway 10.2.4.2Examples for firewall:$ iptables -A INPUT -s 192.168.1.0/24 -d 192.168.1.0/24 --protocol tcp --tcp-flags ALL SYN,ACK -j DROP$ iptables -A FORWARD -m conntrack --ctstate NEW -j DROP (for routers)Firewall practice Check packet filter rule: $ iptables -v -L Drop all forward ICMP packet in router 2: $ iptables -A FORWARD -p ICMP -j DROP Flush all the rule in FORWARD: $ iptables -F FORWARD Stateless: Only allow outgoing TCP connection: $ iptables -A FORWARD -d 10.2.4.0/24 -p TCP --tcp-flags SYN,ACK SYN -j DROP Or with error message: $ iptables -A FORWARD -d 10.2.4.0/24 -p TCP --tcp-flags SYN,ACK SYN -j REJECT Stateful with conntrack Change policy of FORWARD table to DROP: iptables -P FORWARD DROP Only allow outgoing new TCP connection: $ iptables -A FORWARD -s 10.2.4.0/24 -m conntrack --ctstate NEW -j ACCEPT $ iptables -A FORWARD -m conntrack --ctstate ESTABLISHED -j ACCEPT NAT Delete the route to 192.168.1.0/24 network on router 2: $ route del -net 192.168.1.0/24 gw 172.16.2.4 Create source NAT at router 1: $ iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 172.16.2.4 Create destination NAT at router 1: $ iptables -t nat -A PREROUTING -p TCP --dport 8080 -i eth0 -j DNAT --to 192.168.1.100:8180 Application Level Gateway recap:Advantages: user specific rule Fine-gained control (communication peers, functions) Content checking (detect malware, suspicious content) No direct connection between sender/receiver LoggingDisadvantages: Applciation specific expose to attacksWeakness in the concept of Firewall: Mobile devices Tunnels and encryptionOther notes$ iptables -A INPUT -p tcp --dport 7001 -j ACCEPT $ iptables -A OUTPUT -p tcp --sport 22 -j ACCEPTOpenVPN practiceFor RHELServer: Install openvpn:$ yum install openvpn Get server template file:$ cd /usr/share/doc/openvpn-*/sample/sample-config-files/ $ cp server.conf /etc/openvpn Generate keys and certificate and DH file with this: How to Generate Own Certificates Change server.conf file: push \"redirect-gateway def1 bypass-dhcp\" push \"dhcp-option DNS 8.8.8.8\" push \"dhcp-option DNS 8.8.4.4\" user nobody group nobody tls-auth ta.key 0 Make sure these 3 files are in /etc/openvpn/ : ca.crt server.crt server.key In /etc/openvpn/, generate ta key file:$ openvpn --genkey --secret ta.key Enable and start server:$ systemctl start openvpn@server $ systemctl enable openvpn@serverClient: Install openvpn:$ yum install openvpn Generate keys and certificate and DH file with this: How to Generate Own Certificates Copy the ta key file from server to client Create client.ovpn file: client dev tun proto udp remote ip-address-of-server openvpn-port resolv-retry infinite nobind persist-key persist-tun verb 3 ca ca.crt cert client2.crt key client2.key tls-auth ta.key 1 Run:openvpn --config client.ovpnCreate config file for OPENVPN tap devices: Config file for bridge client: dev tap0 proto tcp-client tls-client remote 172.16.2.5 ca /sec/certificates/rootCA-cert.pem cert /sec/certificates/192.168.1.100-cert.pem key /sec/certificates/192.168.1.100-private-key.pem Start script for client: #!/bin/bash openvpn --mktun --dev tap0 ifconfig tap0 up ifconfig tap0 10.2.4.212 netmask 255.255.255.0 openvpn --config /sec/openvpn/tap/bridgeclient.conf Config file for bridge server: dev tap0 proto tcp-server tls-server ca /sec/certificates/rootCA-cert.pem cert /sec/certificates/10.2.4.2-cert.pem key /sec/certificates/10.2.4.2-private-key.pem dh /sec/certificates/dh2048.pem (Not succesful yet) Start script for client: #!/bin/bash openvpn --mktun --dev tap0 ifconfig tap0 up ifconfig tap0 promisc ifconfig eth0 promisc brctl addbr mybridge brctl addif mybridge tap0 brctl addif mybridge eth0 ifconfig tap0 0.0.0.0 ifconfig eth0 0.0.0.0 ifconfig mybridge 172.16.2.5 netmask 255.255.255.0 up openvpn --config /sec/openvpn/tap/bridgeserver.conf " }, { "title": "11+ Usefull Mac keyboard skills", "url": "/posts/macos-11-keyboard-skills/", "categories": "MacOS", "tags": "macos", "date": "2020-06-11 20:43:00 +0000", "snippet": "In this guide, you’ll learn how to unlock the most useful hidden keyboard characters on your Mac.If you happen to be multilingual, a developer, a statistician or a data scientist, it’s likely you already know how to unlock additional symbols when typing on your Mac. But if you aren’t, you’ll need to take a moment to learn.How to type a check markWant this? √ Type Option and v (or type Option-4 for a cent sigil).How to type a copyright symbolThe Mac shortcut to type a copyright (©) symbol is Option + g.To infinity and beyondTap Option + 5 to reach infinity: ∞How to type an acute accent on your MacTo type a grave accent, press Option and the letter e together, let go the keys and then press the letter you wish to accentuate: á, é, í, ó, ú.How to type a grave accent on your MacIt’s similar for a downwards accent on a letter: press Option and ` together, let go the keys and then press the letter you want accented: à, è, ì, ò, ù.How to type other accents on your MacThere are other accents you can type on your Mac: Option + i, letter â, ê, ô, î, û Option + n, letter ã, ñ, õ Option + u, letter ä, ë, ï, ö, ü, ÿ Option, A or a å, Å Option + ‘ æ, Æ Option + q, Q œ, Œ Option + c or C ç, Ç Option + o or O ø, ØHow to type an upside-down question markIf you’ve ever wanted to soup-up your Twitter name with an upside-down question mark like the cool kids on Netscape Navigator, here’s how to do it:Shift + Option + ? = ¿Shift and Option together unlock all kinds of additional characters. Press Option + Shift 2 to type ™, for example.How to type an Apple logoAnother example: just press Option + Shift + k to type an Apple logo: How to type emojisThe easiest way to type emoji on your Mac is to press Control + Command + Space to summon the emoji character palette at the point in your document at which your cursor sits. Now find the one you want to use and press it to insert it.Want more characters?If you don’t need to use unusual characters in your work often enough to learn where they are, but need to do so on an ad hoc basis, here’s what to do: Open System Preferences&gt;Keyboard and check ‘S_how keyboard and emoji viewers in menu bar_’. A new Menu item will appear; click this to get to the character and emoji viewers. Now you can see what characters are available as you press different keys.Use Text ReplacementYou can also create your own keyboard shortcuts for items you may write frequently. These can be words, phrases, or even complete paragraphs. Once you set one of these shortcuts up, all you’ll need to do to type one of them is to recall the code you associated with the phrase. The only problem is these only work inside applications that support the feature (not Word). Here is how to do it. Open the Keyboard item in System Preferences. Select the Text pane and tap the plus (+)A new text entry field appears. Type the shortcut code you want to use in the left-field and the text you want created when you use that code in the column to its right.¯_(ツ)_/¯ Hope this helps." }, { "title": "Basics of Unix / Linux Commands", "url": "/posts/basic-commands/", "categories": "Linux, Basics", "tags": "macos, linux", "date": "2020-06-11 20:43:00 +0000", "snippet": " List what inside directory$ ls $ ls -a $ ls -l Make new directory$ mkdir Change to directory$ cd [directory]Current directory (.)$ cd .Parent directory (..)$ cd .. Print working directory$ pwd Copy file (makes a copy of file1 in the current working directory and calls it file2)$ cp _file1_ _file2_ // copy file to current directory: $ cp /home/hungpham/something.txt . // copy folder: $ cp -a /source/. /dest/ $ cp -R ~/Desktop/MyFolder /Documents Move file or folder$ mv _file1_ _file2_ Remove files:$ rm [file] Remove folder:$ rm -r [folder] Clear terminal screen:$ clear Display the contents of a file on the screen (concatenate):$ cat [file.txt] Write the contents of a file onto the screen a page at a time:$ less [file]Press the [space-bar] if you want to see another page, and type [q] if you want to quit reading. As you can see, less is used in preference to cat for long files. Write the first ten lines of a file to the screen:$ head [file] $ head -10 [file] Write the last ten lines of a file to the screen:$ tail [file] Search through text with less command:$ less [file](still in less) type [/] followed by the word to search:/[word]Type [n] to see next occurrence. grep: searches files for specified words or patterns$ grep [word] [file] $ grep -i [word] [file] -v display those lines that do NOT match -n precede each matching line with the line number -c print only the total count of matched linesgrep -ivc [word] [file] Word count:$ wc -w [file]Line count:$ wc -l [file] The &gt; symbol: redirect the output of a command$ cat &gt; [file]Join file:$ cat [file1] [file2] &gt; [bigfile] The form » appends standard output to a file$ cat &gt;&gt; file &lt;: redirect the input of a command Sort alphabetically or numerically sorts a list$ sort $ sort &lt; [bigfile] $ sort &lt; [bigfile] &gt; [sortedfile] See who is on the system$ who $ who &gt; names.txt Pipes: |$ who | sort $ who | wc -lExample: display all lines of [list1] and [list2] containing the letter ‘p’, and sort the result$ cat list1 list2 | grep p | sort *: wildcard, which match against none or more character(s) in a file (or directory) nameExample: list all files in the current directory starting with list….$ ls list* $ ls *.java The character ? will match exactly one character. So ?ouse will match files like house and mouse, but not grouse.$ ls ?list On-line manuals$ man wc $ whatis wc When not sure of the exact name of a command$ apropos [keyword] $ apropos move Change permission of file or directory:$ chmod a+rw fileSee How to change access rights of files/directories Sleep for 5 seconds: $ sleep 5 See process (running and done): $ ps Continue suspending process in background: $ bg List all processes: jobs Foreground a process $ fg [jobnumber] Kill job $ kill [jobnumber] Force to kill $ kill -9 [jobnumber] " }, { "title": "Access Rights of Files/Directories", "url": "/posts/access-rights-of-files-directories/", "categories": "Linux, Basics", "tags": "linux", "date": "2020-06-11 20:43:00 +0000", "snippet": "From the left side:The first character shows if it is a file or directory.File: -Directory: dNext 9 characters are the access rights (or permissions), and are taken as three groups of 3. The left group of 3 gives the file permissions for the user that owns the file (or directory). The middle group gives the permissions for the group of people to whom the file (or directory) belongs. The rightmost group gives the permissions for all others.Access rights on files: r (or -) indicates read permission (or otherwise), that is, the presence or absence of permission to read and copy the file w (or -) indicates write permission (or otherwise), that is, the permission (or otherwise) to change a file x (or -) indicates execution permission (or otherwise), that is, the permission to execute a file, where appropriateAccess rights on directories: r allows users to list files in the directory w means that users may delete files from the directory or move files into it x means the right to access files in the directory. This implies that you may read files in the directory provided you have read permission on the individual files.Examples: -rwxrwxrwx: a file that everyone can read, write and execute (and delete)On MacOS the symbol @ indicates that the file has extended attributes.The number after shows the number of files inside a directory. The . and .. are also counted.If it is a file, the number is 1.Next is the owner of the file or directory (in this case: hungpham).The word staff is the group, this can be either staff or sysadm group.Next is the size of file or directory.Finally, the day of creation is shown.How to change access rightsCommand:$ chmod [option] [whom][+,-,=][permission] [filename]SymbolMeaninguuserggroupootheraallrread permissionwwrite (delete) permissionxexecution (or access directory) permission+add permission-remove permission=set exactly equalExample: give read and write permissions on the file to all$ chmod a+rw fileReference!" }, { "title": "How to generate self-signed certificates", "url": "/posts/how-to-generate-self-signed-certificates/", "categories": "Security, Certificates", "tags": "security, certificate", "date": "2020-06-11 18:00:00 +0000", "snippet": "Setup certificate Create private root CA key:openssl genrsa -des3 -out private-CA-key.pem 4096 Create self sign Root Certificate:openssl req -x509 -new -nodes -key private-CA-key.pem -sha256 -days 500 -out rootCA-cert.pem Create CSR for a server (or machine), remember to change “machine” to your machine’s name or ip address (also common name): openssl genrsa -des3 -out machine-private-key.pem 4096 openssl req -new -key machine-private-key.pem -out machine-csr.csr or in one line: openssl req -nodes -newkey rsa:2048 -keyout example.key -out example.csr -subj \"/C=GB/ST=London/L=London/O=Global Security/OU=IT Department/CN=example.com\" Sign the machine CSR with private root CA key and root CA certificate:openssl x509 -req -in machine-csr.csr -CA rootCA-cert.pem -CAkey private-CA-key.pem -CAcreateserial -days 500 -sha256 -out machine-cert.pem Create DH file:openssl dhparam -out dh2048.pem 2048Check signature algorithmopenssl x509 -noout -text -in machine-cert.pem | grep \"Signature Algorithm\" | uniq For JKS: Create keystore:keytool -genkey -alias server_name -keyalg RSA -keysize 2048 -keystore server_name.jks Generate a CSR:keytool -certreq -alias server_name -file server_name.csr -keystore server_name.jks Sign the CSR with:openssl x509 -req -in machine-csr.csr -CA rootCA-cert.pem -CAkey private-CA-key.pem -CAcreateserial -days 500 -sha256 -out machine-cert.pem Import the CA and signed-certificate into keystore: keytool -import -keystore clientkeystore -file ca-certificate.pem.txt -alias theCARoot keytool -import -trustcacerts -alias alias_name -file certificate_file -keystore keystore_file " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Others, GitHub Page", "tags": "other, github, page", "date": "2019-08-08 12:10:00 +0000", "snippet": "Note: this post is copied from Chirpy.This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0200.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Others, GitHub Page", "tags": "other, github, page", "date": "2019-08-08 09:33:00 +0000", "snippet": "Note: this post is copied from Chirpy.This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
